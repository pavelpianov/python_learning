import os
import time

# 1. Файлы и каталоги, которые необходимо скопировать, собираются в список.
source = ['"C:\\Users\\Good Day\\Documents"', '"D:\\стихи"']
# Заметьте, что для имён, содержащих пробелы, необходимо использовать
# двойные кавычки внутри строки.

# 2. Резервные копии должны храниться в основном каталоге резерва.
target_dir = '"D:\\Development\\Python\\AByteofPython\\Backup"' # Подставьте ваш путь.

# 3. Файлы помещаются в zip-архив.
# 4. Именем для zip-архива служит текущая дата и время.
target = target_dir + os.sep + time.strftime('%Y%m%d%H%M%S') + '.zip'
	'''
		Обратите внимание на употребление переменной os.sep – 
		она содержит разделитель пути для конкретной операционной системы, 
		т.е. он будет '/' в GNU/Linux и Unix3, '\\' в Windows 
		и ':' в Mac OS. Использование os.sep вместо этих символов 
		напрямую делает программу переносимой, 
		и она сможет работать на всех этих операционных системах.
	'''
	'''
		Функция time.strftime() принимает в качестве аргумента 
		формат вывода времени, например, такой, как мы указали в программе выше.
		Символ формата %Y будет замещён годом и столетием.
		Символ %m будет замещён месяцем в форме числа от 01 до 12, и так далее. 
		Полный список таких символов формата можно найти в справочнике по Python.
	'''


# 5. Используем команду "zip" для помещения файлов в zip-архив
zip_command = "zip -qr {0} {1}".format(target, ' '.join(source))
	'''
		Команда zip, которую мы используем, имеет некоторые параметры. 
		Параметр «-q» используется для указания, что команда должна 
		сработать тихо. Параметр «-r» обозначает, что команда архивации 
		должна работать рекурсивно для каталогов, т.е. должна включать 
		все подкаталоги и файлы. Оба параметра объединены и указаны 
		в краткой форме «-qr».
	'''


# Запускаем создание резервной копии
if os.system(zip_command) == 0:
	print('Резервная копия успешно создана в', target)
else:
	print('Создание резервной копии НЕ УДАЛОСЬ')
